{"version":3,"sources":["p5.vector-arguments.js"],"names":[],"mappings":"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","file":"p5.vector-arguments.min.js","sourcesContent":["/* exported enableVectorArguments */\n\nfunction enableVectorArguments(p5Instance) {\n  // Each key is a list of argument types. 2 indicates a 2D vector, 3 is a 2D or 3D vector\n  // depending on the canvas type. A n-D vector can be saturated by the first n components\n  // of a p5.Vector, by an Array with length n, or by n arguments from the argument list.\n  const functionArgTypes = {\n    'createCanvas': [2],\n    'createGraphics': [2],\n    'createImage': [2],\n    'text': [0, 2, 2],\n    'image': [0, 2],\n\n    'arc': [2, 2],\n    'circle': [2],\n    'ellipse': [2, 2, 25],\n    'line': [3, 3],\n    'point': [3],\n    'quad': [3, 3, 3],\n    'rect': [2, 2],\n    'square': [2],\n    'triangle': [2, 2, 2],\n\n    'bezier': [3, 3, 3, 3],\n    'bezierVertex': [3, 3, 3],\n    'curve': [3, 3, 3, 3],\n    'curveVertex': [3],\n    'vertex': [3],\n    'quadraticVertex': [3, 3],\n\n    'plane': [2],\n    'box': [3],\n    'ellipsoid': [3],\n  }\n\n  for (const key of Object.keys(functionArgTypes)) {\n    wrap(p5Instance || this, key, functionArgTypes[key])\n  }\n  wrap(p5.Element.prototype, 'position', [2]);\n\n  // Replace object[key] by a wrapped version of the original function that will\n  // call the original function with an argument list in which Vectors and\n  // Arrays have been replaced by their components.\n  function wrap(object, propertyName, argListSpec) {\n    const originalFn = object[propertyName];\n    const prop = Object.getOwnPropertyDescriptor(object, propertyName);\n    function value() {\n      const args = unpackArgumentList(arguments, argListSpec);\n      return originalFn.apply(this, args);\n    }\n    value.toString = () => originalFn.toString();\n    Object.defineProperty(object, propertyName, 'get' in prop\n      ? { ...prop, get: () => value }\n      : { ...prop, value });\n  }\n\n  function unpackArgumentList(args, argListSpec) {\n    let includesVectors = false;\n    for (let i = 0; i < args.length; i++) {\n      if (args[i] instanceof p5.Vector) {\n        includesVectors = true;\n        break;\n      }\n    }\n    if (!includesVectors) {\n      return args;\n    }\n    let i = 0, o = 0;\n    const result = new Array(args.length);\n    for (let arity of argListSpec) {\n      if (i >= args.length)\n        break;\n      let arg = args[i++];\n      if (arity === 3 && drawingContext instanceof CanvasRenderingContext2D) {\n        arity = 2;\n      }\n      if (arity === 2 || arity === 3) {\n        if (arg instanceof p5.Vector) {\n          result[o++] = arg.x;\n          result[o++] = arg.y;\n          if (arity == 3) {\n            result[o++] = arg.z;\n          }\n        } else if (Array.isArray(arg) && arg.length === arity) {\n          result[o++] = arg[0];\n          result[o++] = arg[1];\n          if (arity == 3) {\n            result[o++] = arg[2];\n          }\n          // Read the next n numbers from the argument list. Use\n          // `isNaN(Number(arg))` instead of `typeof arg === 'number'`, in\n          // order to preserve the underlying behavior of e.g. circle('10',\n          // '20', '50').\n        } else if (!Number.isNaN(Number(arg))) {\n          const stop = o + arity;\n          do {\n            result[o++] = arg;\n            if (o === stop) break;\n            arg = args[i++];\n          } while (!Number.isNaN(Number(arg)));\n          if (o < stop) break;\n        } else\n          break;\n        continue;\n      }\n      result[o++] = arg;\n    }\n    while (i < args.length) {\n      result[o++] = args[i++];\n    }\n    return result;\n  }\n}\n"]}